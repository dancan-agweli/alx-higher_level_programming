How to Use 101-lazy_matrix_mul.py
=================================

This module provides a matrix multiplication function called `lazy_matrix_mul(m_a, m_b)`.

Usage
=====

The function `lazy_matrix_mul(...)` returns a new matrix resulting from the multiplication of `m_a` and `m_b`.

Example 1:
-----------
Input:
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
>>> m_a = [
...     [1, 2],
...     [3, 4],
... ]
>>> m_b = m_a
>>> print(lazy_matrix_mul(m_a, m_b))

Output:
[[7, 10],
 [15, 22]]

Example 2:
-----------
Input:
>>> m_a = [[1, 2]]
>>> m_b = [
...     [3, 4],
...     [5, 6]
... ]
>>> print(lazy_matrix_mul(m_a, m_b))

Output:
[[13, 16]]

The function also supports floating-point numbers.

Example 3:
-----------
Input:
>>> m_a = [
...     [1.2, 5.5, 6.2],
...     [4.66, 12.3, -9.2]
... ]
>>> m_b = [
...     [5.0, 3.3],
...     [-2.9, 4.4],
...     [7.2, 4.4]
... ]
>>> print(lazy_matrix_mul(m_a, m_b))

Output:
[[34.69, 55.44],
 [-78.61, 29.018]]

Note: The function requires a minimum of two arguments.

Example 4:
-----------
Input:
>>> print(lazy_matrix_mul(m_a))

Output:
Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Example 5:
-----------
Input:
>>> print(lazy_matrix_mul())

Output:
Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

ValueErrors
===========

If the matrices cannot be multiplied (i.e., the row count of `m_a` is not equal to the column count of `m_b`), a ValueError is raised.

Example 6:
-----------
Input:
>>> m_a = [
...     [1, 2],
...     [3, 4],
... ]
>>> m_b = [
...     [1, 2],
...     [2, 3],
...     [4, 5]
... ]
>>> print(lazy_matrix_mul(m_a, m_b))

Output:
Traceback (most recent call last):
    ValueError: shapes (2, 2) and (3, 2) not aligned: 2 (dim 1) != 3 (dim 0)

The parameters `m_a` and `m_b` cannot be empty; otherwise, a ValueError is raised.

Example 7:
-----------
Input:
>>> print(lazy_matrix_mul([[]], [[5, 6], [7, 8]]))

Output:
Traceback (most recent call last):
    ValueError: shapes (1, 0) and (2, 2) not aligned: 0 (dim 1) != 2 (dim 0)

Example 8:
-----------
Input:
>>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[]]))

Output:
Traceback (most recent call last):
    ValueError: shapes (2, 2) and (1, 0) not aligned: 2 (dim 1) != 1 (dim 0)

Invalid Matrices
================

The parameters `m_a` and `m_b` must be lists. If either parameter is not a list, a ValueError is raised.

Example 9:
-----------
Input:
>>> print(lazy_matrix_mul("not a list", [[1, 2]]))

Output:
Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

Example 10:
------------
Input:
>>> print(lazy_matrix_mul([[1, 2]], "also not a list"))

Output:
Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

Example 11:
------------
Input:
>>> print(lazy_matrix_mul("not a list", "also not a list"))

Output:
Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

If either parameter is `None`, a TypeError is raised.

Example 12:
------------
Input:
>>> print(lazy_matrix_mul(None, None))

Output:
Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

The parameters `m_a` and `m_b` must be lists of lists containing only integers or floats; otherwise, a ValueError or TypeError is raised.

Example 13:
------------
Input:
>>> print(lazy_matrix_mul([[1, "non-number"]], [[3, 4]]))

Output:
Traceback (most recent call last):
    ValueError: shapes (1, 2) and (1, 2) not aligned: 2 (dim 1) != 1 (dim 0)

Example 14:
------------
Input:
>>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]]))

Output:
Traceback (most recent call last):
    TypeError: invalid data type for einsum

Example 15:
------------
Input:
>>> print(lazy_matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]]))

Output:
Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

Finally, the length of all rows in matrices `m_a` and `m_b` should be equivalent; otherwise, a ValueError is raised.

Example 16:
------------
Input:
>>> m_a = [
...     [1, 2],
...     [3, 4, 5]
... ]
>>> m_b = [
...     [1, 2],
...     [3, 4]
... ]
>>> print(lazy_matrix_mul(m_a, m_b))

Output:
Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

Example 17:
------------
Input:
>>> m_a = [
...     [1, 2],
...     [3, 4]
... ]
>>> m_b = [
...     [1, 2],
...     [3, 4, 5]
... ]
>>> print(lazy_matrix_mul(m_a, m_b))

Output:
Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

Example 18:
------------
Input:
>>> m_a = [
...     [1, 2],
...     [3, 4, 5]
... ]
>>> m_b = m_a
>>> print(lazy_matrix_mul(m_a, m_b))

Output:
Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

